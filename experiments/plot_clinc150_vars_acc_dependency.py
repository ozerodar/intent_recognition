from pathlib import Path
import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt
import numpy as np

num_variations = 100
emb_models = ["all-MiniLM-L6-v2", "all-roberta-large-v1"]


def is_close_to_set(x, s):
    for el in s:
        if np.isclose(x, el):
            return True
    return False


def plot_alg(ax, xpoints, ypoints_us, ypoints_s, model, color):
    ticksy = np.arange(65, 102.5, 2.5)
    ticksx = np.arange(0, num_variations + 10, 10)
    ticks_labels_x = [i for i in range(num_variations + 10) if i % 20 == 0]
    ticks_labels_y = [60, 65, 70, 75, 80, 85, 90, 95, 100]

    ax.plot(
        xpoints,
        ypoints_us,
        label=f"encoder: {model}, unsupervised",
        color=color[0],
        linewidth=2,
    )
    ax.plot(
        xpoints,
        ypoints_s,
        label=f"encoder: {model}, supervised",
        color=color[1],
        linewidth=2,
    )
    ax.set_xlabel("number of sentences", fontsize=9)
    ax.set_ylabel("accuracy [%]")
    ax.yaxis.set_ticks(ticksy)
    ax.set_yticklabels(
        [int(i) if is_close_to_set(i, ticks_labels_y) else "" for i in ticksy]
    )
    ax.xaxis.set_ticks(ticksx)
    ax.set_xticklabels(
        [np.round(i, 1) if is_close_to_set(i, ticks_labels_x) else "" for i in ticksx]
    )
    ax.legend(loc="lower right", fontsize=9)
    # ax.legend(loc="lower right")
    ax.grid(True, alpha=0.5)


def plot_alg_mini(ax, xpoints, ypoints_us, ypoints_s, model, color, thr=10):
    ticksy = np.arange(65, 102.5, 2.5)
    ticksx = np.arange(0, thr + 1, 2)
    ticks_labels_x = [i for i in range(thr + 1) if i % 2 == 0]
    ticks_labels_y = [60, 65, 70, 75, 80, 85, 90, 95, 100]

    ax.plot(
        xpoints[:thr],
        ypoints_us[:thr],
        label=f"encoder: {model}, unsupervised",
        color=color[0],
        linewidth=2,
    )
    ax.plot(
        xpoints[:thr],
        ypoints_s[:thr],
        label=f"encoder: {model}, supervised",
        color=color[1],
        linewidth=2,
    )

    ax.set_xlabel("number of sentences", fontsize=9)
    ax.yaxis.set_ticks(ticksy)
    ax.set_yticklabels(
        [int(i) if is_close_to_set(i, ticks_labels_y) else "" for i in ticksy]
    )
    ax.xaxis.set_ticks(ticksx)
    ax.set_xticklabels(
        [np.round(i, 1) if is_close_to_set(i, ticks_labels_x) else "" for i in ticksx]
    )
    ax.yaxis.tick_right()
    ax.grid(True, alpha=0.5)

    # ax.yaxis.set_ticks(ticks)
    # ax.xlabel("number of sentences [-]")
    # ax.ylabel("accuracy [%]")
    # ax.legend(loc="lower right")
    # ax.grid()


xpoints = np.array(list(range(1, num_variations + 1)))
ypoints_us_mini = np.array(
    [
        63.51111111,
        71.75555556,
        77.64444444,
        79.06666667,
        79.08888889,
        79.13333333,
        80.31111111,
        83.24444444,
        82.44444444,
        82.95555556,
        83.24444444,
        83.68888889,
        82.71111111,
        82.51111111,
        84.15555556,
        85.71111111,
        85.2,
        85.55555556,
        84.31111111,
        84.86666667,
        85.24444444,
        84.91111111,
        85.82222222,
        85.6,
        85.26666667,
        85.68888889,
        85.57777778,
        86.2,
        85.64444444,
        85.75555556,
        85.15555556,
        86.0,
        85.8,
        85.91111111,
        85.93333333,
        85.84444444,
        86.04444444,
        86.82222222,
        86.62222222,
        87.0,
        86.88888889,
        86.88888889,
        86.2,
        86.86666667,
        86.84444444,
        86.55555556,
        86.75555556,
        86.86666667,
        87.24444444,
        86.84444444,
        86.31111111,
        87.08888889,
        86.75555556,
        86.97777778,
        87.02222222,
        87.6,
        87.04444444,
        87.17777778,
        87.22222222,
        87.0,
        87.17777778,
        87.66666667,
        86.93333333,
        86.82222222,
        87.0,
        87.06666667,
        87.24444444,
        87.93333333,
        87.44444444,
        87.66666667,
        88.04444444,
        87.57777778,
        87.48888889,
        87.84444444,
        87.51111111,
        87.86666667,
        87.55555556,
        87.8,
        87.8,
        87.57777778,
        87.66666667,
        88.08888889,
        87.51111111,
        87.91111111,
        87.64444444,
        87.86666667,
        87.82222222,
        87.93333333,
        88.08888889,
        87.71111111,
        87.75555556,
        87.68888889,
        88.0,
        88.04444444,
        87.84444444,
        87.97777778,
        87.97777778,
        88.0,
        88.08888889,
        88.04444444,
    ]
)
ypoints_s_mini = np.array(
    [
        61.06666667,
        74.17777778,
        80.86666667,
        85.17777778,
        84.97777778,
        85.86666667,
        86.71111111,
        88.97777778,
        89.28888889,
        90.22222222,
        89.68888889,
        89.97777778,
        89.64444444,
        90.53333333,
        90.95555556,
        91.6,
        91.57777778,
        91.68888889,
        91.04444444,
        91.64444444,
        92.68888889,
        92.4,
        92.04444444,
        92.33333333,
        92.02222222,
        92.44444444,
        92.62222222,
        92.48888889,
        92.64444444,
        92.93333333,
        92.95555556,
        92.91111111,
        92.53333333,
        92.55555556,
        92.6,
        92.6,
        92.95555556,
        92.75555556,
        93.31111111,
        93.06666667,
        93.2,
        93.37777778,
        93.26666667,
        93.4,
        92.6,
        93.37777778,
        93.37777778,
        93.42222222,
        93.42222222,
        93.57777778,
        93.42222222,
        93.68888889,
        93.6,
        92.95555556,
        93.24444444,
        93.15555556,
        93.53333333,
        93.2,
        93.55555556,
        93.4,
        93.6,
        93.71111111,
        93.4,
        93.77777778,
        93.91111111,
        93.77777778,
        93.77777778,
        93.95555556,
        93.95555556,
        94.22222222,
        94.02222222,
        94.02222222,
        94.08888889,
        93.82222222,
        94.55555556,
        94.15555556,
        93.77777778,
        93.91111111,
        93.44444444,
        93.71111111,
        93.75555556,
        94.24444444,
        94.11111111,
        93.97777778,
        93.68888889,
        94.04444444,
        94.44444444,
        94.51111111,
        93.77777778,
        94.33333333,
        94.2,
        93.95555556,
        94.0,
        94.17777778,
        94.28888889,
        94.33333333,
        94.26666667,
        94.0,
        94.35555556,
        94.42222222,
    ]
)
ypoints_us_r = np.array(
    [
        65.86666667,
        75.37777778,
        79.42222222,
        81.97777778,
        83.35555556,
        82.93333333,
        84.48888889,
        85.22222222,
        86.77777778,
        86.06666667,
        85.75555556,
        86.68888889,
        86.31111111,
        86.42222222,
        88.35555556,
        87.95555556,
        88.88888889,
        87.6,
        86.86666667,
        88.11111111,
        89.28888889,
        88.26666667,
        88.64444444,
        88.93333333,
        88.84444444,
        88.93333333,
        88.82222222,
        88.57777778,
        88.75555556,
        89.2,
        88.93333333,
        89.53333333,
        89.73333333,
        88.71111111,
        88.8,
        89.26666667,
        89.66666667,
        89.71111111,
        89.91111111,
        90.35555556,
        89.84444444,
        90.44444444,
        90.11111111,
        90.11111111,
        90.26666667,
        89.77777778,
        90.37777778,
        89.93333333,
        90.22222222,
        90.35555556,
        90.17777778,
        90.11111111,
        90.2,
        90.06666667,
        90.64444444,
        90.73333333,
        90.66666667,
        90.24444444,
        90.71111111,
        90.26666667,
        90.62222222,
        90.64444444,
        90.2,
        90.57777778,
        90.62222222,
        90.8,
        90.22222222,
        90.73333333,
        89.97777778,
        91.0,
        90.84444444,
        91.06666667,
        91.04444444,
        91.17777778,
        91.24444444,
        91.11111111,
        91.06666667,
        91.22222222,
        90.86666667,
        91.13333333,
        91.04444444,
        91.48888889,
        91.2,
        91.48888889,
        91.11111111,
        91.44444444,
        91.13333333,
        91.62222222,
        91.42222222,
        91.28888889,
        91.17777778,
        91.42222222,
        91.57777778,
        91.64444444,
        91.33333333,
        91.37777778,
        91.57777778,
        91.57777778,
        91.51111111,
        91.62222222,
    ]
)
ypoints_s_r = np.array(
    [
        65.66666667,
        78.57777778,
        83.91111111,
        87.04444444,
        88.13333333,
        88.4,
        89.4,
        91.82222222,
        90.68888889,
        92.4,
        91.88888889,
        92.17777778,
        92.64444444,
        92.86666667,
        93.42222222,
        93.22222222,
        93.35555556,
        93.0,
        92.44444444,
        93.02222222,
        93.62222222,
        94.37777778,
        93.97777778,
        93.84444444,
        93.55555556,
        94.55555556,
        94.37777778,
        93.68888889,
        94.28888889,
        94.44444444,
        94.53333333,
        94.13333333,
        94.33333333,
        94.26666667,
        94.13333333,
        94.44444444,
        94.75555556,
        94.86666667,
        94.68888889,
        95.11111111,
        94.22222222,
        95.04444444,
        94.33333333,
        94.64444444,
        95.02222222,
        94.77777778,
        94.97777778,
        94.95555556,
        94.97777778,
        94.73333333,
        94.62222222,
        94.95555556,
        95.17777778,
        94.71111111,
        95.15555556,
        95.31111111,
        94.82222222,
        95.04444444,
        94.84444444,
        94.97777778,
        94.95555556,
        94.55555556,
        95.02222222,
        95.26666667,
        94.97777778,
        95.31111111,
        94.86666667,
        94.93333333,
        95.2,
        95.11111111,
        95.11111111,
        94.62222222,
        95.4,
        94.88888889,
        94.97777778,
        94.95555556,
        94.86666667,
        95.08888889,
        95.13333333,
        95.24444444,
        95.42222222,
        95.08888889,
        95.22222222,
        95.93333333,
        95.33333333,
        95.48888889,
        95.26666667,
        95.44444444,
        95.51111111,
        95.4,
        95.51111111,
        95.37777778,
        95.22222222,
        95.22222222,
        95.22222222,
        95.26666667,
        95.48888889,
        95.51111111,
        95.35555556,
        95.4,
    ]
)

colors = [["blueviolet", "lightcoral"], ["royalblue", "darkred"]]

gs = gridspec.GridSpec(1, 4)
ax0 = plt.subplot(gs[0, :3])
ax1 = plt.subplot(gs[0, 3:])

# fig, axes = plt.subplots(nrows=1, ncols=2)

plot_alg(ax0, xpoints, ypoints_us_mini, ypoints_s_mini, emb_models[0], colors[0])
plot_alg(ax0, xpoints, ypoints_us_r, ypoints_s_r, emb_models[1], colors[1])
plot_alg_mini(ax1, xpoints, ypoints_us_mini, ypoints_s_mini, emb_models[0], colors[0])
plot_alg_mini(ax1, xpoints, ypoints_us_r, ypoints_s_r, emb_models[1], colors[1])
# ax0, ax1 = axes.flatten()


path = Path(__file__).parent / "plots"
if not path.exists():
    path.mkdir(parents=True)

plt.savefig(str(path / "num_vars_accuracy.eps"), format="eps")
plt.show()
